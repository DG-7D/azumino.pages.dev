---
import "../../styles/reset.css";
import "../..//styles/campbell.css";
import { SEO } from "astro-seo";
const siteName = "あづみのメモ帳";

Astro.props.title = "Webカメラ照準器";
Astro.props.description = "スマホなどを照準器にできるWebアプリです。";
const title = Astro.props.title;
const showTitle: boolean = title != siteName;
const pageTitle: string = `${showTitle ? title + " – " : ""}${siteName}`;
---

<!doctype html>
<html lang="ja">
    <head>
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <SEO
            title={pageTitle}
            description={Astro.props.description}
            charset="UTF-8"
            openGraph={{
                basic: {
                    title: pageTitle,
                    type: "website",
                    image: new URL(Astro.props.ogImage ?? "ogImageDefault.jpg", Astro.url.origin).toString(),
                },
                optional: {
                    description: Astro.props.description,
                    locale: "ja_JP",
                    siteName: siteName,
                },
            }}
            twitter={{
                card: Astro.props.summaryLargeImage ? "summary_large_image" : "summary",
                site: "@DG_7D",
                creator: "@DG_7D",
            }}
        />
    </head>
    <body>
        <video id="liveView"> </video>
        <div id="sight"></div>
        <div id="settings">
            <label for="focalLV">カメラ焦点距離</label><input type="number" inputmode="numeric" id="focalLV" value="24" />
            <label for="focalSight">照準焦点距離</label><input type="number" inputmode="numeric" id="focalSight" value="50" />
            <!-- <label for="distance">撮影距離(0:無限遠)</label><input type="number" inputmode="numeric" id="distance" value="0" />
            <label for="parallaxX">視差(右)</label><input type="number" inputmode="numeric" id="parallaxX" value="0" />
            <label for="parallaxY">視差(上)</label><input type="number" inputmode="numeric" id="parallaxY" value="0" /> -->
        </div>
        <script>
            const liveView = document.getElementById("liveView")! as HTMLVideoElement;
            const sight = document.getElementById("sight")!;
            const focalLV = document.getElementById("focalLV")! as HTMLInputElement;
            const focalSight = document.getElementById("focalSight")! as HTMLInputElement;
            const inputs = [focalLV, focalSight];
            const settings = document.getElementById("settings")!;

            const localStorageNumber = {
                setItem: function (key: string, value: number): void {
                    localStorage.setItem(key, value.toString());
                },
                getItem: function (key: string): number {
                    return Number(localStorage.getItem(key));
                },
            };

            function activateLiveView() {
                navigator.mediaDevices.getUserMedia({ audio: false, video: { facingMode: "environment" } }).then((stream) => {
                    console.log(stream.getVideoTracks()[0].getSettings());
                    liveView.srcObject = stream;
                    liveView.play();
                });
            }

            function initSettings() {
                inputs.forEach((input) => {
                    if (localStorage.getItem(input.id)) {
                        input.value = localStorage.getItem(input.id)!;
                    } else {
                        localStorage.setItem(input.id, input.value);
                    }
                });
            }
            function applySettings() {
                const focalLVNumber = Math.max(1, localStorageNumber.getItem("focalLV"));
                const focalSightNumber = Math.max(focalLVNumber, localStorageNumber.getItem("focalSight"));
                sight.style.inset = ((1 - focalLVNumber / focalSightNumber) / 2) * 100 + "%";
            }

            addEventListener("load", () => {
                initSettings();
                applySettings();
                activateLiveView();
            });
            inputs.forEach((input) => {
                input.addEventListener("input", () => {
                    localStorage.setItem(input.id, input.value);
                    applySettings();
                });
            });
        </script>
        <style lang="scss">
            :root {
                color-scheme: dark;
                --background-color: var(--black);
                --main-shadow: var(--bblack);
                --main-color: var(--bwhite);
                --sub-color: var(--white);
                --link-color: var(--byellow);

                @media (prefers-color-scheme: light) {
                    color-scheme: light;
                    --background-color: var(--bwhite);
                    --main-shadow: var(--white);
                    --main-color: var(--black);
                    --sub-color: var(--bblack);
                    --link-color: var(--blue);
                }
            }
            body {
                overflow: hidden;
                color: var(--main-color);
            }
            video#liveView {
                position: static;
                top: 0;
                left: 0;
                max-width: 100vw;
                max-height: 100vh;
            }
            div#sight {
                position: absolute;
                z-index: 1;
                inset: 25%;
                border: 2px solid red;
            }
            div#settings {
                position: absolute;
                z-index: 2;
                top: 0;
                left: 0;
                background: rgba(127, 127, 127, 0.5);
                // display: none;
                * {
                    margin: 0.25em;
                }
                input[type="number"] {
                    width: 3em;
                }
            }
        </style>
    </body>
</html>
