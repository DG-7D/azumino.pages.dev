---
if (Astro.url.pathname == "/") {
    // トップでは表示しない
    return;
}

interface DirectoryData {
    dir: string;
    name: string;
    child?: DirectoryData[];
}

const root = "";

let rootDir: DirectoryData = {
    dir: root,
    name: "あづみのメモ帳",
    child: [
        {
            dir: "blog",
            name: "あづみのブログ",
        },
        {
            dir: "about",
            name: "あづみについて",
        },
        {
            dir: "misc",
            name: "その他",
        },
    ]
}

let path: string[] = Astro.url.pathname.split("/").filter(dir => dir != "");
path.pop(); // 自分自身を除去

let currentDir: DirectoryData = rootDir;
let currentPath = "/";
let pathNamePairs: {path:string, name: string}[] = [ {path: currentPath, name: rootDir.name}];

for (const dir of path) {
    currentDir = currentDir.child?.find(dirNamePair => dirNamePair.dir == dir) ?? {dir: dir, name: dir};
    currentPath += currentDir.dir + "/";
    pathNamePairs.push({
        path: currentPath,
        name: currentDir.name,
    });
}
---

<nav>
    <ul class="inline">
        {
            pathNamePairs.map(pathNamePair => (
                <!-- display: inline -->
                <li><a href={pathNamePair.path}>{pathNamePair.name}</a></li>
            ))
        }
    </ul>
</nav>
<style>
    ul {
        padding: 0;
    }
    li {
        display: inline;
        margin-left: 0;
        &::after {
            content: " / " !important;
        }
        &::before {
            content: "" !important;
        }
    }
</style>
