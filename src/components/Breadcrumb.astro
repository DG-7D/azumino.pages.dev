---
if (Astro.url.pathname == "/") {
    // トップでは表示しない
    return;
}

interface DirectoryData {
    dir: string;
    name: string;
    child?: DirectoryData[];
}

const root = "";

let rootDir: DirectoryData = {
    dir: root,
    name: "あづみのメモ帳",
    child: [
        {
            dir: "blog",
            name: "あづみのブログ",
        },
        {
            dir: "about",
            name: "あづみについて",
        },
        {
            dir: "misc",
            name: "その他",
        },
    ],
};

let path: string[] = Astro.url.pathname.split("/").filter(dir => dir != "");
path.pop(); // 自分自身を除去

let currentDir: DirectoryData = rootDir;
let currentPath = "/";
let pathNamePairs: { path: string; name: string }[] = [{ path: currentPath, name: rootDir.name }];

for (const dir of path) {
    currentDir = currentDir.child?.find(dirNamePair => dirNamePair.dir == dir) ?? { dir: dir, name: dir };
    currentPath += currentDir.dir + "/";
    pathNamePairs.push({
        path: currentPath,
        name: currentDir.name,
    });
}
---

<nav>
    <ul>
        {
            pathNamePairs.map(pathNamePair => (
                <li>
                    <a href={pathNamePair.path}>{pathNamePair.name}</a>
                </li>
            ))
        }
    </ul>
</nav>
<style>
    nav {
        margin-bottom: calc(-1 * var(--gap));
        ul {
            padding: 0;
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            align-content: center;
            justify-content: flex-start;
            align-items: baseline;
            column-gap: 0.25rem;

            > li {
                display: contents;
                > a {
                    display: block;
                }
                &::after {
                    display: block;
                    content: "/";
                }
            }
        }
    }
</style>
