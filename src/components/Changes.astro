---
import { execSync } from "child_process";
import { toJpDateString } from "@/utils/Date.mjs";

interface Props {
    count: number;
    inline?: boolean;
}

const commits: {
    date: string;
    message: string;
}[] = JSON.parse(("[" + execSync('git log --format=\'{"date":"%ad","message":"%s"},\' --date=short --first-parent', { shell: "bash" }).toString() + "]").replace(",\n]", "]"));
const history: { [date: string]: string[] } = {};
let overflow: boolean = false;
for (const commit of commits) {
    if (commit.message.startsWith("_")) {
        continue;
    }
    if (history[commit.date] === undefined) {
        if (Object.keys(history).length < Astro.props.count) {
            history[commit.date] = [commit.message];
        } else {
            overflow = true;
        }
    } else if (!history[commit.date]!.includes(commit.message)) {
        history[commit.date]!.unshift(commit.message);
    }
}
---

<dl class={Astro.props.inline ? "inline" : ""}>
    {
        // prettier-ignore
        Object.entries(history).map(([date, messages]) =>
            <>
                <dt><time datetime={date}>{toJpDateString(date)}</time></dt>
                {messages.map(message => (
                    <dd>{message}</dd>
                ))}
            </>
        )
    }
    {
        // prettier-ignore
        overflow && (
            <>
                <dt>それ以前</dt>
                <dd><a href="/changes/">もっと見る</a></dd>
            </>
        )
    }
</dl>
