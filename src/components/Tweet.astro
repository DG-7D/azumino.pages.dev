---
import Center from "./Center.astro";
import TwitterIcon from "./TwitterIcon.astro";
import { toJpDateString } from "@/utils/Date.mjs";

interface Props {
    id: string;
    hideMedia?: boolean;
    hideThread?: boolean;
}

// 使わないのは書いてない
interface Tweet {
    created_at: string,
    entities: {
        // hashtags: ,
        urls: {
            display_url:string,
            expanded_url:string,
            url:string,
        }[],
        // user_mentions:,
        media?: {
            display_url: string,
            expanded_url: string,
            url: string,
        }[]
    },
    id_str: string,
    text: string,
    user: {
        id_str: string,
        name: string,
        profile_image_url_https: string,
        screen_name: string,
    },
    parent?: Tweet,
    photos?: {
        expandedUrl: string,
        url: string,
        width: number,
        height: number,
    }[],
    video?: {
        aspectRatio: number[],
        poster: string,
        variants: {type:string,src:string}[],
    }
}

const urlSearchParams = new URLSearchParams({
    id: Astro.props.id,
    token: Math.random().toString(),
});
const url = new URL("https://cdn.syndication.twimg.com/tweet-result?" + urlSearchParams.toString());
const tweet: Tweet = await fetch(url).then(response => response.json());

for (const url of tweet.entities.urls) {
    tweet.text = tweet.text.replaceAll(url.url, `<a href="${url.expanded_url}" target="_blank">${url.display_url}</a>`);
}
if (tweet.entities.media) {
    for (const media of tweet.entities.media) {
        tweet.text = tweet.text.replaceAll(media.url, "");
    }
}
---

<Center>
    <div class="embedded-tweet">
        <div class="header">
            <a class="author" href={"https://twitter.com/" + tweet.user.screen_name}>
                <img class="icon" src={tweet.user.profile_image_url_https} alt="" />
                <div class="name">{tweet.user.name}</div>
                <div class="id">@{tweet.user.screen_name}</div>
            </a>
            <a href={"https://twitter.com/i/status/" + Astro.props.id} class="twitter"><TwitterIcon /></a>
        </div>
        <div class="main" set:html={tweet.text} />
        {
            tweet.photos && tweet.photos.length > 0 && 
                <div class="media">
                    {tweet.photos.map(photo=>(
                        <img src={photo.url} width={photo.width} height={photo.height} alt="">
                    ))}
                </div>
        }   
        {
            tweet.video &&
                <video class="media" controls poster={tweet.video.poster}>
                    {tweet.video.variants.reverse().map(variant => (
                        <source src={variant.src} type={variant.type}></source>
                    ))}
                </video>
        }
        <div class="footer">{toJpDateString(new Date(tweet.created_at))}</div>
    </div>
</Center>
<style>
    div.embedded-tweet {
        --main-color: rgb(247, 249, 249);
        --sub-color: rgb(139, 152, 165);
        --link-color: rgb(29, 115, 240);
        --background-color: rgb(21, 32, 43);
        --border-color: rgb(56, 68, 77);

        @media (prefers-color-scheme: light) {
            --main-color: rgb(15, 20, 15);
            --sub-color: rgb(83, 100, 113);
            --background-color: rgb(255, 255, 255);
            --border-color: rgb(239, 243, 244);
        }

        width: 100%;
        max-width: 30rem;
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: 0.5rem;
        border: 0.1rem solid var(--border-color);
        border-radius: 0.5rem;
        padding: 1rem;
        background-color: var(--background-color);
        color: var(--main-color);
        > *.header {
            display: flex;
            flex-direction: row;
            gap: 0.5rem;
            > *.author {
                display: grid;
                grid-template:
                    "icon . ." 1fr
                    "icon . name" 1rem
                    "icon . id" 1rem
                    "icon . ." 1fr / 3rem 0.5rem auto;
                > *.icon {
                    grid-area: icon;
                    width: 100%;
                    height: 100%;
                    border-radius: 0.5rem;
                }
                > *.name {
                    grid-area: name;
                    overflow: hidden;
                    line-height: 100%;
                    font-size: 1rem;
                    font-weight: bold;
                }
                > *.id {
                    grid-area: id;
                    overflow: hidden;
                    line-height: 100%;
                    font-size: 1rem;
                    color: var(--sub-color);
                }
            }
            > *.twitter {
                margin-left: auto;
                width: 2rem;
                height: 2rem;
                color: #1d9bf0;
            }
        }
        > *.body {
            a {
                color: var(--link-color);
            }
        }
        > *.media {
            border: 0.1rem solid var(--border-color);
            border-radius: 0.5rem;
            overflow: hidden;
            &:has(> *) {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 0.1rem;
            }
            > * {
                display: block;
                width: 100%;
                height: auto;
            }
        }
        > *.footer {
            color: var(--sub-color);
        }
    }
</style>
