---
import { z } from "astro/zod";
import Center from "./Center.astro";
import TwitterIcon from "./TwitterIcon.astro";
import { toJpDateTimeString } from "@/utils/Date.mjs";

interface Props {
    id: string;
    hideMedia?: boolean;
    hideThread?: boolean;
}

function generateToken() {
    return (Math.random() * 1000).toFixed();
}

// 使わないのは書いてない
const tweetSchemeWithoutParent = z.object({
    created_at: z.string(),
    entities: z.object({
        hashtags: z.object({
            text: z.string(),
        }).array(),
        urls: z.object({
            display_url: z.string(),
            expanded_url: z.string().url(),
            url: z.string().url(),
        }).array(),
        user_mentions: z.object({
            screen_name: z.string(),
        }).array(),
        // symbols: z.object({}).array(), //謎
        media: z.object({
            display_url: z.string(),
            expanded_url: z.string().url(),
            url: z.string().url(),
        }).array().optional(),
    }),
    id_str: z.string(),
    text: z.string(),
    user: z.object({
        id_str: z.string(),
        name: z.string(),
        profile_image_url_https: z.string().url(),
        screen_name: z.string(),
    }),
    // parent: ,
    photos: z.object({
        expandedUrl: z.string().url(),
        url: z.string().url(),
        width: z.number(),
        height: z.number(),
    }).array().optional(),
    video: z.object({
        aspectRatio: z.number().array().length(2),
        poster: z.string(),
        variants: z.object({
            type: z.string(),
            src: z.string().url(),
        }).array(),
    }).optional(),
})
const tweetScheme = tweetSchemeWithoutParent.extend({parent: tweetSchemeWithoutParent.optional()})

function textToHtml(tweet: z.infer<typeof tweetScheme>, removeFirstMention = false, removeMediaUrl = false) {
    for (const hashtag of tweet.entities.hashtags) {
        const hashtagText = "#" + hashtag.text;
        tweet.text = tweet.text.replaceAll(hashtagText, toATag("https://twitter.com/hashtag/" + hashtag.text, hashtagText));
    }
    for (const url of tweet.entities.urls) {
        tweet.text = tweet.text.replaceAll(url.url, toATag(url.expanded_url, url.display_url));
    }
    for (const mention of tweet.entities.user_mentions) {
        const mentionText = "@" + mention.screen_name;
        if(removeFirstMention && tweet.text.startsWith(mentionText)) {
            tweet.text = tweet.text.replace(mentionText, "");
            continue;
        }
        tweet.text = tweet.text.replaceAll(mentionText, toATag("https://twitter.com/" + mention.screen_name, mentionText));
    }
    if (tweet.entities.media) {
        for (const media of tweet.entities.media) {
            tweet.text = tweet.text.replaceAll(media.url, removeMediaUrl ? "" : toATag(media.expanded_url, media.display_url));
        }
    }
}
function toATag(href: string, text: string) {
    return `<a href="${href}" target="_blank">${text}</a>`;
}
function toTweetUrl(tweet: z.infer<typeof tweetScheme>) {
    return "https://twitter.com/" + tweet.user.screen_name + "/status/" + tweet.id_str;
}

console.log("Tweet: " + Astro.props.id)

const urlSearchParams = new URLSearchParams({
    id: Astro.props.id,
    token: generateToken(),
});
const url = new URL("https://cdn.syndication.twimg.com/tweet-result?" + urlSearchParams.toString());
const tweet = tweetScheme.parse(await (async ()=>{
    await new Promise(resolve => setTimeout(resolve, 1000));   
    let errorCount = 0;
    while (true) {
        try {
            return await fetch(url).then(response => response.json())
        } catch (error) {
            console.error(error);
            urlSearchParams.set("token", generateToken());
            if (errorCount < 2) {
                await new Promise(resolve => setTimeout(resolve, 10000));
            } else {
                throw error;
            }
            errorCount++;
        }
    }
})());

textToHtml(tweet, tweet.parent ? true : false, !Astro.props.hideMedia); // 返信先がある場合は先頭@id非表示
tweet.parent && textToHtml(tweet.parent);
---

<Center>
    <div class="embedded-tweet">
        {
            !Astro.props.hideThread && tweet.parent &&
            <div class="header">
                <a class="author" href={"https://twitter.com/" + tweet.parent.user.screen_name} target="_blank">
                    <img class="icon" src={tweet.parent.user.profile_image_url_https} alt="" />
                    <div class="name">{tweet.parent.user.name}</div>
                    <div class="id">@{tweet.parent.user.screen_name}</div>
                </a>
                <a class="twitter" href={toTweetUrl(tweet.parent)} target="_blank"><TwitterIcon /></a>
            </div>
            <div class="parent">
                <div class="line"><div /></div>
                <div class="text" set:html={tweet.parent.text} />
            </div>
        }
        <div class="header">
            <a class="author" href={"https://twitter.com/" + tweet.user.screen_name} target="_blank">
                <img class="icon" src={tweet.user.profile_image_url_https} alt="" />
                <div class="name">{tweet.user.name}</div>
                <div class="id">@{tweet.user.screen_name}</div>
            </a>
            {
                !(!Astro.props.hideThread && tweet.parent) &&
                <a class="twitter" href={toTweetUrl(tweet)} target="_blank"><TwitterIcon /></a>
            }
        </div>
        {
            Astro.props.hideThread && tweet.parent &&
            <div class="replyTo">
                <a href={toTweetUrl(tweet.parent)} target="_blank">返信先: @{tweet.parent.user.screen_name}</a>
            </div>
        }
        <div class="main" set:html={tweet.text} />
        {
            !Astro.props.hideMedia && tweet.photos && tweet.photos.length > 0 && 
                <div class="media">
                    {tweet.photos.map(photo=>(
                        <a href={photo.url} target="_blank">
                            <img src={photo.url} width={photo.width} height={photo.height} alt="">
                        </a>
                    ))}
                </div>
        }   
        {
            !Astro.props.hideMedia && tweet.video &&
                <div class="media">
                    <video controls controlslist="nodownload " poster={tweet.video.poster}>
                        {tweet.video.variants.reverse().map(variant => (
                            // なぜかtag=12があると途中で止まることがある
                            <source src={variant.src.replace("?tag=12","")} type={variant.type}></source>
                        ))}
                    </video>
                </div>
        }
        <a class="footer" href={toTweetUrl(tweet)} target="_blank">{toJpDateTimeString(new Date(tweet.created_at))}</a>
    </div>
</Center>
<style>
    div.embedded-tweet {
        --main-color: rgb(247, 249, 249);
        --sub-color: rgb(139, 152, 165);
        --link-color: rgb(29, 115, 240);
        --background-color: rgb(21, 32, 43);
        --border-color: rgb(56, 68, 77);

        @media (prefers-color-scheme: light) {
            --main-color: rgb(15, 20, 15);
            --sub-color: rgb(83, 100, 113);
            --background-color: rgb(255, 255, 255);
            --border-color: rgb(239, 243, 244);
        }

        width: 100%;
        max-width: 30rem;
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: 0.5rem;
        border: 0.1rem solid var(--border-color);
        border-radius: 0.5rem;
        padding: 1rem;
        background-color: var(--background-color);
        color: var(--main-color);
        a {
            color: var(--link-color);
        }
        > *.header {
            display: flex;
            flex-direction: row;
            gap: 0.5rem;
            > *.author {
                display: grid;
                grid-template:
                    "icon . ." 1fr
                    "icon . name" 1rem
                    "icon . id" 1rem
                    "icon . ." 1fr / 3rem 0.5rem auto;
                color: inherit;
                > *.icon {
                    grid-area: icon;
                    width: 100%;
                    height: 100%;
                    border-radius: 0.5rem;
                }
                > *.name {
                    grid-area: name;
                    overflow: hidden;
                    line-height: 100%;
                    font-size: 1rem;
                    font-weight: bold;
                }
                > *.id {
                    grid-area: id;
                    overflow: hidden;
                    line-height: 100%;
                    font-size: 1rem;
                    color: var(--sub-color);
                }
            }
            > *.twitter {
                margin-left: auto;
                width: 2rem;
                height: 2rem;
                color: #1d9bf0;
            }
        }
        > *.replyTo {
            a {
                color: var(--sub-color);
            }
        }
        > *.parent {
            display: flex;
            flex-direction: row;
            gap: 0.5rem;
            > *.line {
                flex: none;
                width: 3rem;
                > * {
                    margin: auto;
                    width: 0.2rem;
                    height: 100%;
                    background-color: var(--border-color);
                }
            }
        }
        > *.media {
            border: 0.1rem solid var(--border-color);
            border-radius: 0.5rem;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            align-items: stretch;
            gap: 0.1rem;
            > * > img {
                display: block;
                width: 100%;
                height: auto;
            }
        }
        > *.footer {
            color: var(--sub-color);
        }
    }
</style>
